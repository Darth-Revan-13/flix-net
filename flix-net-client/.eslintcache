[{"/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/index.js":"1","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/App.js":"2","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/header/Header.js":"3","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/main/Main.js":"4","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/footer/Footer.js":"5","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/Redux/store.js":"6","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/Redux/movies.js":"7","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/Redux/tvShows.js":"8","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/main/mainComponets/movies/Movies.js":"9","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/main/mainComponets/tvShows/TvShows.js":"10"},{"size":396,"mtime":1609571266114,"results":"11","hashOfConfig":"12"},{"size":376,"mtime":1609561152433,"results":"13","hashOfConfig":"12"},{"size":160,"mtime":1609561277650,"results":"14","hashOfConfig":"12"},{"size":578,"mtime":1609701158386,"results":"15","hashOfConfig":"12"},{"size":156,"mtime":1609561335841,"results":"16","hashOfConfig":"12"},{"size":467,"mtime":1609570994588,"results":"17","hashOfConfig":"12"},{"size":1409,"mtime":1609697369156,"results":"18","hashOfConfig":"12"},{"size":1319,"mtime":1609697390544,"results":"19","hashOfConfig":"12"},{"size":822,"mtime":1609700779807,"results":"20","hashOfConfig":"12"},{"size":795,"mtime":1609699923939,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"196g1dz",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/index.js",[],["47","48"],"/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/App.js",[],"/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/header/Header.js",[],"/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/main/Main.js",["49","50","51"],"/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/footer/Footer.js",[],"/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/Redux/store.js",[],"/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/Redux/movies.js",["52","53","54"],"// import redux, {createStore, applyMiddleware} from 'redux';\n// import thunk from 'redux-thunk';\nimport uuid from 'react-uuid';\n\n// ---------------------------------- Setting Initial State For Movies\nconst initialMovies = [\n    {_id: uuid(), movieTitle: 'Seven Pounds'},\n    {_id: uuid(), movieTitle: 'Fast and Furious'}\n]\n\n// ---------------------------------- Adding A Movie  \nexport const addMovie = (movie) => {\n    return (dispatch) => {\n        dispatch({type: 'ADD_MOVIE', data: movie});\n    }\n}\n\n// ---------------------------------- Removing Movie\nexport const removeMovie = (_id) => {\n    return (dispatch) => {\n        dispatch({type: 'REMOVE_MOVIE', data: _id});\n    }\n}\n\n// ---------------------------------- Getting All Movies\nexport const getAllMovies = () => {\n    return {\n        type: 'GET_ALL_MOVIES'\n    }\n}\n\n// ---------------------------------------------------------------------- Movie Reducer\nexport default function moviesReducer(movies = initialMovies, action) {\n    switch(action.type) {\n        case 'ADD_MOVIE':\n            return [...movies, action.data]\n            break;\n        case 'REMOVE_MOVIE':             \n            const updatedArr = movies.filter(movie => movie._id !== action.data);\n            return updatedArr;\n            break;\n        case 'GET_ALL_MOVIES':\n            return movies;\n            break;\n        default:\n            return movies;\n    }\n}\n","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/Redux/tvShows.js",["55","56","57"],"// import redux, {createStore, applyMiddleware} from 'redux';\n// import thunk from 'redux-thunk';\nimport uuid from 'react-uuid';\n\n// ---------------------------------- Setting Initial State For TV Shows\nconst initialShows = [ \n    {_id: uuid(), showTitle: 'Dexter'},\n    {_id: uuid(), showTitle: 'Avatar the Last Airbender'}\n]\n\n// ---------------------------------- Adding A TV Show\nexport const addTvShow =(tvShow) => {\n    return (dispatch) => {\n        dispatch({type: 'ADD_TV_SHOW', data: tvShow})\n    }\n}\n\n// ---------------------------------- Removing TV Show\nexport const removeTvShow = (_id) => {\n    return (dispatch) => {\n        dispatch({type: 'REMOVE_TV_SHOW', data: _id})\n    }\n}\n\n// ------------------------------------------------------------------- Setting Initial StateSetting Initial State\nexport default function tvShowReducer(tvShows = initialShows, action) {\n    switch(action.type) {\n        case 'ADD_TV_SHOW':\n            return [...tvShows, action.data]\n            break;\n        case 'REMOVE_TV_SHOW':             \n            const updatedTvShows = tvShows.filter(tvShow => tvShow._id !== action.data);\n            return updatedTvShows\n            break;\n        case 'GET_ALL_TV_SHOWS': \n            return tvShows;\n            break;\n        default:\n            return tvShows;\n    }\n}\n","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/main/mainComponets/movies/Movies.js",["58"],"import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport _ from '../../../../../node_modules/lodash';\n\nexport default function Movies() {\n    const initialState = useSelector(movies => movies.moviesReducer);\n    console.log(initialState);\n    return (\n        <div className='-container'>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Favorite Movies</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {_.map(initialState, (movie) => (\n                        <tr id={movie._id} className='movie-container'>\n                            <td>{movie.movieTitle}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\n\n","/Users/spawn/bryan-university/fsw-130/week6/flix-net/flix-net-client/src/components/main/mainComponets/tvShows/TvShows.js",["59"],"import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport _ from '../../../../../node_modules/lodash';\n\nexport default function TVShows() {\n    const initialState = useSelector(tvShows => tvShows.tvShowReducer)\n    console.log(initialState);\n    return (\n        <div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Favorite TV Shows</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {_.map(initialState, (show) => (\n                        <tr id={show._id} className='show-container'>\n                            <td>{show.showTitle}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":3,"column":9,"nodeType":"66","messageId":"67","endLine":3,"endColumn":15},{"ruleId":"64","severity":1,"message":"68","line":3,"column":17,"nodeType":"66","messageId":"67","endLine":3,"endColumn":22},{"ruleId":"69","severity":1,"message":"70","line":18,"column":1,"nodeType":"71","messageId":"72","endLine":28,"endColumn":14},{"ruleId":"73","severity":1,"message":"74","line":37,"column":13,"nodeType":"75","messageId":"76","endLine":37,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":41,"column":13,"nodeType":"75","messageId":"76","endLine":41,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":44,"column":13,"nodeType":"75","messageId":"76","endLine":44,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":30,"column":13,"nodeType":"75","messageId":"76","endLine":30,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":34,"column":13,"nodeType":"75","messageId":"76","endLine":34,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":37,"column":13,"nodeType":"75","messageId":"76","endLine":37,"endColumn":19},{"ruleId":"64","severity":1,"message":"77","line":2,"column":22,"nodeType":"66","messageId":"67","endLine":2,"endColumn":33},{"ruleId":"64","severity":1,"message":"77","line":2,"column":22,"nodeType":"66","messageId":"67","endLine":2,"endColumn":33},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'useDispatch' is defined but never used.","no-global-assign","no-unsafe-negation"]